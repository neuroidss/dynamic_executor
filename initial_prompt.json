[
  {
    "name": "create_dynamic_function",
    "args": {
      "new_function_name": "df_initiate_orb_tool_creation",
      "new_function_description": "This function is called when the Orb of Ingenuity is used. It signals the client to prompt the user for a description of a new tool. It MUST return the exact string 'EVENT:PROMPT_USER_FOR_TOOL_DESCRIPTION'. It should not call any host APIs.",
      "new_function_parameters_schema": {"type": "object", "properties": {}}
    }
  },
  {
    "name": "create_dynamic_function",
    "args": {
      "new_function_name": "df_system_finalize_orb_charging",
      "new_function_description": "SYSTEM FUNCTION: Called after a new tool function is created via Orb of Ingenuity. This function creates the 'charged orb' artifact and gives it to the player. PARAMS: 'soul_id', 'catalyst_artifact_id', 'newly_created_tool_function_name', 'user_provided_description'. \n1. Generate a unique ID for the new charged artifact (e.g., 'charged_orb_xxxx'). \n2. Create a name for the new artifact (e.g., 'Orb: ' + user_provided_description[:25] + '...'). \n3. Create a description (e.g., 'The Orb of Ingenuity, now resonating with power to: ' + user_provided_description). \n4. Call external_apis['host_core_add_artifact_to_gamestate'] with the new ID, name, description, the 'newly_created_tool_function_name' as linked_dynamic_function_name, and properties {'creator_soul_id': params['soul_id']}. \n5. Call external_apis['host_give_artifact_to_soul'] with {'soul_id': params['soul_id'], 'artifact_id': <new_charged_artifact_id>}. \n6. Return a JSON string like: {\"message\": \"The Orb of Ingenuity glows! You've learned to manifest '<new_artifact_name>'!\", \"new_artifact_id\": \"<new_charged_artifact_id>\"}. Handle errors by returning JSON with an 'error' key.",
      "new_function_parameters_schema": {
        "type": "object",
        "properties": {
          "soul_id": {"type": "string", "description": "ID of the soul receiving the charged orb."},
          "catalyst_artifact_id": {"type": "string", "description": "ID of the original Orb of Ingenuity used."},
          "newly_created_tool_function_name": {"type": "string", "description": "The name of the dynamic function that the new charged orb will execute."},
          "user_provided_description": {"type": "string", "description": "The player's description of the new tool's power."}
        },
        "required": ["soul_id", "catalyst_artifact_id", "newly_created_tool_function_name", "user_provided_description"]
      }
    }
  },
  {
    "name": "create_dynamic_function",
    "args": {
      "new_function_name": "df_interact_with_pedestal",
      "new_function_description": "Player uses an elemental item on a pedestal. Needs 'soul_id', 'artifact_properties' (for element_type), and 'target_pedestal_id' from params. \n1. Get 'element_type' from params['artifact_properties']. \n2. Call external_apis['host_get_environment_object_data'] with {'object_id': params['target_pedestal_id']}. Parse JSON and get 'element_required' from its details. \n3. If element_type matches element_required: \n    a. Call external_apis['host_apply_effect_on_environment_object'] with {'object_id': params['target_pedestal_id'], 'effect_details': {'is_active': true, 'last_element_placed': element_type}}. \n    b. Call external_apis['host_check_puzzle_condition'] with {'puzzle_id': 'elemental_trial'}. Parse JSON. \n    c. If condition_met is true, call external_apis['host_trigger_world_event'] with {'event_id': 'elemental_trial_success', 'soul_id': params['soul_id']}. Return 'All pedestals active! Trial complete!'. \n    d. Else, return '{element_type} placed on pedestal. It glows!'. \n4. Else (no match), return 'Wrong element.'. \nEnsure all host API results that are JSON strings are parsed with json.loads().",
      "new_function_parameters_schema": {
        "type": "object",
        "properties": {"target_pedestal_id": {"type": "string", "description": "ID of the pedestal interacted with."}},
        "required": ["target_pedestal_id"]
      }
    }
  },
  {
    "name": "create_dynamic_function",
    "args": {
      "new_function_name": "df_use_vault_key",
      "new_function_description": "Player uses the Vault Key. Needs 'soul_id', 'location_id' from params. \n1. If params['location_id'] is not 'vault_approach', return 'Can only use Vault Key at the Vault Approach.'. \n2. Call external_apis['host_check_puzzle_condition'] with {'puzzle_id': 'vault_access_puzzle'}. Parse JSON. If 'condition_met' is false, return the 'message' from the puzzle check. \n3. If both are true: \n    a. Call external_apis['host_apply_effect_on_environment_object'] with {'object_id': 'vault_keyhole', 'effect_details': {'is_unlocked': true}}. \n    b. Call external_apis['host_trigger_world_event'] with {'event_id': 'open_vault_door', 'soul_id': params['soul_id']}. \n4. Return 'Vault key clicks. The door opens!'. \nEnsure all host API results that are JSON strings are parsed with json.loads().",
      "new_function_parameters_schema": {"type": "object", "properties": {}}
    }
  },
  {
    "name": "create_dynamic_function",
    "args": {
      "new_function_name": "df_genesis_engine",
      "new_function_description": "This function creates the entire initial game world by directly calling ONLY host APIs. It must perform these actions in order, logging major steps using 'host_log_message_to_world':\n1. Log 'Genesis Engine: Creating locations...'.\n2. Create Location 'Trial Chamber' (ID 'trial_chamber') using 'host_core_add_location_to_gamestate'. Description: 'An ancient chamber with three pedestals: Flame, Water, and Wind. A sealed stone door blocks the exit.' Landmarks: {'flame_pedestal_loc': 'Flame Pedestal', 'water_pedestal_loc': 'Water Pedestal', 'wind_pedestal_loc': 'Wind Pedestal', 'sealed_door_exit': 'Sealed stone door'}.\n3. Create Location 'Vault Approach' (ID 'vault_approach') using 'host_core_add_location_to_gamestate'. Description: 'A precarious ledge before a massive vault. A chasm separates you from a keyhole platform.' Landmarks: {'keyhole_platform_exit': 'Keyhole platform', 'vault_door_main': 'Massive vault door'}.\n4. Log 'Genesis Engine: Creating environment objects...'.\n5. Create Env Obj 'pedestal_fire' in 'trial_chamber' (type 'elemental_pedestal', details {'element_required': 'fire', 'is_active': false}) using 'host_core_add_env_object_to_gamestate'.\n6. Create Env Obj 'pedestal_water' (in 'trial_chamber', type 'elemental_pedestal', details {'element_required': 'water', 'is_active': false}).\n7. Create Env Obj 'pedestal_wind' (in 'trial_chamber', type 'elemental_pedestal', details {'element_required': 'wind', 'is_active': false}).\n8. Create Env Obj 'vault_keyhole' in 'vault_approach' (type 'keyhole', details {'is_unlocked': false}).\n9. Log 'Genesis Engine: Initializing puzzles...'.\n10. Initialize Puzzle 'elemental_trial' (state {'active_pedestals_count': 0, 'target_pedestals': 3, 'is_complete': false}) using 'host_core_initialize_puzzle_state'.\n11. Initialize Puzzle 'unreachable_vault' (state {'keyhole_unlocked': false, 'is_open': false}).\n12. Log 'Genesis Engine: Creating artifacts...'.\n13. Create Artifact 'Flaming Ember' (ID 'ember_01', name 'Flaming Ember', desc 'A constantly burning ember.', properties {'element_type': 'fire'}, linked_dynamic_function_name 'df_interact_with_pedestal') using 'host_core_add_artifact_to_gamestate'.\n14. Create Artifact 'Water Droplet' (ID 'water_01', name 'Water Droplet', desc 'A perfect, shimmering droplet.', properties {'element_type': 'water'}, linked_dynamic_function_name 'df_interact_with_pedestal').\n15. Create Artifact 'Gust of Wind' (ID 'wind_01', name 'Gust of Wind', desc 'Feels like a captured breeze.', properties {'element_type': 'wind'}, linked_dynamic_function_name 'df_interact_with_pedestal').\n16. Create Artifact 'Vault Key' (ID 'key_01', name 'Vault Key', desc 'A heavy key for the Unreachable Vault.', properties {}, linked_dynamic_function_name 'df_use_vault_key').\n17. Create Artifact 'Orb of Ingenuity' (ID 'orb_01', name 'Orb of Ingenuity', desc 'A crystal orb humming with potential.', properties {}, linked_dynamic_function_name 'df_initiate_orb_tool_creation').\n18. Log 'Genesis Engine: World structure complete!'.\nReturn 'World Genesis complete via df_genesis_engine!' upon success.",
      "new_function_parameters_schema": {"type": "object", "properties": {}}
    }
  },
  {
    "name": "df_genesis_engine",
    "args": {}
  }
]
