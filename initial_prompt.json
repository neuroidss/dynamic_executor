[
  {
    "name": "create_dynamic_function",
    "args": {
      "new_function_name": "df_initiate_orb_tool_creation",
      "new_function_description": "This function is called when the Orb of Ingenuity is used. It signals the client to prompt the user for a description of a new tool. It MUST return the exact string 'EVENT:PROMPT_USER_FOR_TOOL_DESCRIPTION'. It should not call any host APIs.",
      "new_function_parameters_schema": {"type": "object", "properties": {}}
    }
  },
  {
    "name": "create_dynamic_function",
    "args": {
      "new_function_name": "df_system_finalize_orb_charging",
      "new_function_description": "SYSTEM FUNCTION: Called after a new tool function is created via Orb of Ingenuity. This function creates the 'charged orb' artifact and gives it to the player. PARAMS: 'soul_id', 'catalyst_artifact_id', 'newly_created_tool_function_name', 'user_provided_description'. \n1. Generate a unique ID for the new charged artifact (e.g., 'charged_orb_xxxx'). \n2. Create a name for the new artifact (e.g., 'Orb: ' + user_provided_description[:25] + '...'). \n3. Create a description (e.g., 'The Orb of Ingenuity, now resonating with power to: ' + user_provided_description). \n4. Call external_apis['host_core_add_artifact_to_gamestate'] with the new ID, name, description, the 'newly_created_tool_function_name' as linked_dynamic_function_name, and properties {'creator_soul_id': params['soul_id'], 'client_interaction_rules': [{'action_name_template': 'Use {artifact_name}', 'requires_landmark_interaction_type_key': 'any', 'passes_target_env_object_id_as_param': 'target_env_object_id_if_applicable', 'is_general_use': true}]}. \n5. Call external_apis['host_give_artifact_to_soul'] with {'soul_id': params['soul_id'], 'artifact_id': <new_charged_artifact_id>}. \n6. Return a JSON string like: {\"message\": \"The Orb of Ingenuity glows! You've learned to manifest '<new_artifact_name>'!\", \"new_artifact_id\": \"<new_charged_artifact_id>\"}. Handle errors by returning JSON with an 'error' key.",
      "new_function_parameters_schema": {
        "type": "object",
        "properties": {
          "soul_id": {"type": "string"}, "catalyst_artifact_id": {"type": "string"},
          "newly_created_tool_function_name": {"type": "string"}, "user_provided_description": {"type": "string"}
        },
        "required": ["soul_id", "catalyst_artifact_id", "newly_created_tool_function_name", "user_provided_description"]
      }
    }
  },
  {
    "name": "create_dynamic_function",
    "args": {
      "new_function_name": "df_interact_with_pedestal",
      "new_function_description": "Player uses an elemental item on a pedestal. Needs 'soul_id', 'artifact_properties' (for element_type), and 'target_env_object_id' (the ID of the pedestal env object) from params. \n1. Get 'element_type' from params['artifact_properties']. \n2. Call external_apis['host_get_environment_object_data'] with {'object_id': params['target_env_object_id']}. Parse JSON and get 'element_required' from its details. \n3. If element_type matches element_required: \n    a. Call external_apis['host_apply_effect_on_environment_object'] with {'object_id': params['target_env_object_id'], 'effect_details': {'is_active': true, 'last_element_placed': element_type, 'client_visual_update': {'emissive_color_hex': '#FFFF00', 'emissive_intensity': 3.0 }}}. (Note: Changed visual update to add emissive glow instead of changing base color to green). \n    b. Call external_apis['host_check_puzzle_condition'] with {'puzzle_id': 'elemental_trial'}. Parse JSON. \n    c. If condition_met is true, call external_apis['host_trigger_world_event'] with {'event_id': 'elemental_trial_success', 'soul_id': params['soul_id']}. Return 'All pedestals active! Trial complete!'. \n    d. Else, return '{element_type} placed on pedestal. It glows!'. \n4. Else (no match), return 'Wrong element.'. \nEnsure all host API results that are JSON strings are parsed with json.loads().",
      "new_function_parameters_schema": {
        "type": "object", "properties": {"target_env_object_id": {"type": "string"}}, "required": ["target_env_object_id"]
      }
    }
  },
  {
    "name": "create_dynamic_function",
    "args": {
      "new_function_name": "df_use_vault_key",
      "new_function_description": "Player uses the Vault Key. Needs 'soul_id', 'location_id', and 'target_env_object_id' from params. \n1. If params['location_id'] is not 'vault_approach', return 'Can only use Vault Key at the Vault Approach.'. \n2. Call external_apis['host_check_puzzle_condition'] with {'puzzle_id': 'vault_access_puzzle'}. Parse JSON. If 'condition_met' is false, return the 'message' from the puzzle check (e.g. 'The chasm blocks the way...'). \n3. If 'condition_met' is true: \n    a. Call external_apis['host_apply_effect_on_environment_object'] with {'object_id': params['target_env_object_id'], 'effect_details': {'is_unlocked': true, 'client_visual_update': {'new_color_hex': '#FFFF99'} }}. (target_env_object_id should be 'vault_keyhole') \n    b. Call external_apis['host_trigger_world_event'] with {'event_id': 'open_vault_door', 'soul_id': params['soul_id']}. \n    c. Return 'Vault key clicks. The door opens!'. \nEnsure all host API results that are JSON strings are parsed with json.loads().",
      "new_function_parameters_schema": {
        "type": "object",
        "properties": {"target_env_object_id": {"type": "string", "description": "The ID of the keyhole environment object."}},
        "required": ["target_env_object_id"]
      }
    }
  },
  {
    "name": "create_dynamic_function",
    "args": {
      "new_function_name": "df_check_elemental_trial_logic",
      "new_function_description": "Checks the 'elemental_trial' puzzle. Params: 'puzzle_id', 'current_puzzle_state'. \n1. Initialize active_count = 0. \n2. Get 'pedestal_object_ids' from 'current_puzzle_state' (this list should be populated by df_genesis_engine). \n3. For each pedestal_id in the list, call external_apis['host_get_environment_object_data'] to get its state. \n4. If object.details.is_active is true, increment active_count. \n5. Get 'target_pedestals' from 'current_puzzle_state' (default 3). \n6. If active_count >= target_pedestals, return JSON {'condition_met': true, 'message': 'All elemental pedestals are active!'}. \n7. Else, return JSON {'condition_met': false, 'message': '{active_count}/{target_pedestals} pedestals active.'}.",
      "new_function_parameters_schema": {"type": "object", "properties": {"puzzle_id": {"type": "string"}, "current_puzzle_state": {"type": "object"}}, "required": ["puzzle_id", "current_puzzle_state"]}
    }
  },
    {
    "name": "create_dynamic_function",
    "args": {
      "new_function_name": "df_check_vault_access_logic",
      "new_function_description": "Checks the 'vault_access_puzzle'. Params: 'puzzle_id', 'current_puzzle_state'. \n1. Check if current_puzzle_state.get('light_bridge_active', False) is true. This flag is set by the player-created light bridge tool. \n2. If 'light_bridge_active' is true, return JSON {'condition_met': true, 'message': 'A way to the keyhole is clear!'}. \n3. Else, call external_apis['host_get_environment_object_data'] for 'vault_keyhole'. If its details.is_unlocked is true, return JSON {'condition_met': true, 'message': 'The keyhole is already unlocked.'}. \n4. Else, return JSON {'condition_met': false, 'message': 'The chasm blocks the way to the keyhole.'}. \n(Note: removed direct check for temporary objects as the puzzle state flag 'light_bridge_active' is now the primary condition)",
      "new_function_parameters_schema": {"type": "object", "properties": {"puzzle_id": {"type": "string"}, "current_puzzle_state": {"type": "object"}}, "required": ["puzzle_id", "current_puzzle_state"]}
    }
  },
  {
    "name": "create_dynamic_function",
    "args": {
      "new_function_name": "df_handle_elemental_trial_success",
      "new_function_description": "Handles 'elemental_trial_success' event. Params: 'event_id', 'soul_id'. \n1. Log 'The Elemental Trial is complete! The sealed door in the Trial Chamber rumbles open.' \n2. Call host_set_puzzle_properties for 'elemental_trial' with {'is_complete': true}. \n3. Call host_set_landmark_visual_config for location 'trial_chamber', landmark 'sealed_door_exit_landmark', providing its *complete* configuration for an open state. This should keep its original geometry {'type':'box', 'dimensions':[1,2,0.2]}, position [0,0.5,-5], exit details {'is_exit_to_location_id': 'vault_approach'}, interaction type 'exit', linked puzzle 'elemental_trial', but with an updated material_config to make it appear as an open passage (e.g., transparent). \n4. Call host_log_message_to_world: 'A passage to the Vault Approach is now accessible from the Trial Chamber.' \n5. If 'soul_id' is present, call host_give_artifact_to_soul for 'soul_id' and 'orb_01'. \n6. Return 'Elemental Trial complete actions performed.'",
      "new_function_parameters_schema": {"type": "object", "properties": {"event_id": {"type": "string"}, "soul_id": {"type": "string"}}}
    }
  },
  {
    "name": "create_dynamic_function",
    "args": {
      "new_function_name": "df_handle_open_vault_door",
      "new_function_description": "Handles 'open_vault_door' event. Params: 'event_id', 'soul_id'. \n1. Log 'The Vault door rumbles open!'. \n2. Call host_set_puzzle_properties for 'vault_access_puzzle' with {'is_open': true}. \n3. Call host_set_landmark_visual_config for location 'vault_approach', landmark 'vault_door_main_landmark', providing its *complete* configuration for an open state. This includes its original geometry {'type':'box', 'dimensions':[2,3,0.3]}, position [0,1,-8], interaction type 'exit', linked puzzle 'vault_access_puzzle', but with an updated material_config (base_color_hex: '#90EE90'). It should also set 'is_exit_to_location_id' to a new location ID for the vault interior (e.g., 'vault_interior'). \n4. Return 'Vault door opened actions performed.'",
      "new_function_parameters_schema": {"type": "object", "properties": {"event_id": {"type": "string"}, "soul_id": {"type": "string"}}}
    }
  },
  {
    "name": "create_dynamic_function",
    "args": {
      "new_function_name": "df_genesis_engine",
      "new_function_description": "This function creates the entire initial game world by directly calling ONLY host APIs. Remember, the `external_apis` dictionary is directly available in your function's scope; do not attempt to get it from the `params` argument when calling host APIs. It must perform these actions in order, logging major steps using 'host_log_message_to_world':\n\n--- WORLD PROPERTIES ---\n1. Set 'initial_start_location_id': 'trial_chamber'.\n2. Set 'initial_player_artifacts': ['ember_01', 'water_01', 'wind_01', 'key_01'].\n3. Set 'orb_of_ingenuity_artifact_id': 'orb_01'.\n4. Set 'tool_creation_prompt_template': 'Player wants to: \"{description}\". Make a tool. APIs: {api_list}'.\n5. Set 'client_default_settings': {'camera': {'offset_xyz': [0, 2.5, 4.5], 'look_at_offset_y': 1.0}, 'player_controls': {'move_speed': 2.5, 'rotate_speed': 1.5, 'mouse_sensitivity': 0.002}, 'ui': {'log_max_entries': 20}}.\n6. Set 'void_visual_config': {'center_position_xyz': [0,-50,-100], 'ground_type_key': 'none', 'ground_config': {'color_hex': '#100510'}}.\n7. Set 'ui_messages': {'orb_tool_prompt_initiate': 'The Orb of Ingenuity pulses, awaiting your creative command...', 'limbo_void_description': 'Drifting in an unformed expanse, awaiting world genesis...'}.\n8. Set 'ui_special_location_names': {'limbo_void': 'The Void'}.\n\n--- LOCATIONS & VISUALS ---\n9. Log 'Genesis Engine: Creating locations...'.\n10. Add Location 'trial_chamber': Name 'Trial Chamber', Desc 'An ancient chamber with three pedestals... A sealed stone door blocks one exit.'.\n11. Set Visuals for 'trial_chamber': center [0,0,0], ground_type 'flat_plane', ground_config {'size_xz': [20,20], 'color_hex': '#3a3a3a'}.\n12. Add Location 'vault_approach': Name 'Vault Approach', Desc 'A precarious ledge before a massive vault. A chasm separates you from a keyhole platform.'.\n13. Set Visuals for 'vault_approach': center [10,0,0], ground_type 'split_chasm_platforms', ground_config {'player_platform_size_xyz': [5,0.2,4], 'keyhole_platform_size_xyz': [3,0.2,3], 'keyhole_platform_relative_pos_xz': [0,-8], 'color_hex': '#4f4f4f'}}. (Note: Increased chasm distance).\n14. Add Location 'vault_interior': Name 'Vault Interior', Desc 'Inside the massive vault. Treasures await...'.\n15. Set Visuals for 'vault_interior': center [0,0,0], ground_type 'flat_plane', ground_config {'size_xz': [10,10], 'color_hex': '#504050'}.\n\n--- ENVIRONMENT OBJECTS ---\n16. Log 'Genesis Engine: Creating environment objects...'.\n17. Add EnvObject 'pedestal_fire': loc 'trial_chamber', type 'elemental_pedestal', details {'element_required': 'fire', 'is_active': false, 'client_visual_update': {'new_color_hex': '#FF0000'}}}. (Note: Initial color red).\n18. Add EnvObject 'pedestal_water': loc 'trial_chamber', type 'elemental_pedestal', details {'element_required': 'water', 'is_active': false, 'client_visual_update': {'new_color_hex': '#0000FF'}}}. (Note: Initial color blue).\n19. Add EnvObject 'pedestal_wind': loc 'trial_chamber', type 'elemental_pedestal', details {'element_required': 'wind', 'is_active': false, 'client_visual_update': {'new_color_hex': '#888888'}}}. (Note: Initial color grey).\n20. Add EnvObject 'vault_keyhole': loc 'vault_approach', type 'keyhole', details {'is_unlocked': false, 'client_visual_update': {'new_color_hex': '#CCCC88'}}.\n\n--- LANDMARKS & VISUALS ---\n21. Log 'Genesis Engine: Creating landmarks...'.\n22. Landmark 'trial_chamber'/'flame_pedestal_loc': Name 'Flame Pedestal', pos [2,0.5,-2], geom {'type':'box', 'parameters': {'width': 0.5, 'height': 1.0, 'depth': 0.5}}, material {'base_color_hex':'#FF0000'}, target_env_id 'pedestal_fire', landmark_interaction_type_key 'pedestal'. (Note: Changed to box geometry, adjusted position, set color).\n23. Landmark 'trial_chamber'/'water_pedestal_loc': Name 'Water Pedestal', pos [0,0.5,-3], geom {'type':'box', 'parameters': {'width': 0.5, 'height': 1.0, 'depth': 0.5}}, material {'base_color_hex':'#0000FF'}, target_env_id 'pedestal_water', landmark_interaction_type_key 'pedestal'. (Note: Changed to box geometry, adjusted position, set color).\n24. Landmark 'trial_chamber'/'wind_pedestal_loc': Name 'Wind Pedestal', pos [-2,0.5,-2], geom {'type':'box', 'parameters': {'width': 0.5, 'height': 1.0, 'depth': 0.5}}, material {'base_color_hex':'#888888'}, target_env_id 'pedestal_wind', landmark_interaction_type_key 'pedestal'. (Note: Changed to box geometry, adjusted position, set color).\n25. Landmark 'trial_chamber'/'sealed_door_exit_landmark': Name 'Sealed Stone Door', pos [0,0.5,-5], geom {'type':'box', 'dimensions':[1,2,0.2]}, material {'base_color_hex':'#BB7777'}, exit_to 'vault_approach', landmark_interaction_type_key 'door', linked_puzzle_id_for_open_state 'elemental_trial'.\n26. Landmark 'vault_approach'/'keyhole_platform_landmark': Name 'Keyhole Platform', pos [0,0.25,-8], geom {'type':'sphere', 'radius':0.3}, material {'base_color_hex':'#CCCC88'}, target_env_id 'vault_keyhole', landmark_interaction_type_key 'keyhole_target'. (Note: Adjusted position to match increased chasm distance).\n27. Landmark 'vault_approach'/'vault_door_main_landmark': Name 'Massive Vault Door', pos [0,1,-8], geom {'type':'box', 'dimensions':[2,3,0.3]}, material {'base_color_hex':'#AA66DD'}, landmark_interaction_type_key 'door_inert', linked_puzzle_id_for_open_state 'vault_access_puzzle', exit_to: 'vault_interior'. (Note: Adjusted position to match increased chasm distance).\n28. Landmark 'vault_interior'/'vault_exit_landmark': Name 'Vault Exit', pos [0,1,8], geom {'type':'box', 'dimensions':[2,3,0.3]}, material {'base_color_hex':'#AA66DD'}, exit_to: 'vault_approach', landmark_interaction_type_key: 'exit'. (Note: Adjusted position for vault interior exit).\n29. Landmark 'vault_approach'/'trial_chamber_return_exit': Name 'Return to Trial Chamber', pos [0,0.5,2], geom {'type':'box', 'dimensions':[1,2,0.2]}, material {'base_color_hex':'#77BB77'}, exit_to: 'trial_chamber', landmark_interaction_type_key: 'exit'. (Note: Added exit back to Trial Chamber).\n\n--- PUZZLES & LOGIC REGISTRATION ---\n30. Log 'Genesis Engine: Initializing puzzles and logic...'.\n31. Init Puzzle 'elemental_trial': state {'active_pedestals_count': 0, 'target_pedestals': 3, 'is_complete': false, 'pedestal_object_ids': ['pedestal_fire', 'pedestal_water', 'pedestal_wind']}.\n32. Register Puzzle Check for 'elemental_trial': func 'df_check_elemental_trial_logic'.\n33. Register Event Handler for 'elemental_trial_success': func 'df_handle_elemental_trial_success'.\n34. Init Puzzle 'vault_access_puzzle': state {'keyhole_unlocked': false, 'is_open': false, 'light_bridge_active': false}.\n35. Register Puzzle Check for 'vault_access_puzzle': func 'df_check_vault_access_logic'.\n36. Register Event Handler for 'open_vault_door': func 'df_handle_open_vault_door'.\n\n--- ARTIFACTS & INTERACTION RULES ---\n37. Log 'Genesis Engine: Creating artifacts...'.\n38. Artifact 'ember_01': Name 'Flaming Ember', Desc 'A constantly burning ember.', props {'element_type': 'fire', 'client_interaction_rules': [{'action_name_template': 'Use {artifact_name} on {target_name}', 'requires_landmark_interaction_type_key': 'pedestal', 'passes_target_env_object_id_as_param': 'target_env_object_id'}]}, linked_func 'df_interact_with_pedestal'.\n39. Artifact 'water_01': Name 'Water Droplet', Desc 'A perfect, shimmering droplet.', props {'element_type': 'water', 'client_interaction_rules': [{'action_name_template': 'Use {artifact_name} on {target_name}', 'requires_landmark_interaction_type_key': 'pedestal', 'passes_target_env_object_id_as_param': 'target_env_object_id'}]}, linked_func 'df_interact_with_pedestal'.\n40. Artifact 'wind_01': Name 'Gust of Wind', Desc 'Feels like a captured breeze.', props {'element_type': 'wind', 'client_interaction_rules': [{'action_name_template': 'Use {artifact_name} on {target_name}', 'requires_landmark_interaction_type_key': 'pedestal', 'passes_target_env_object_id_as_param': 'target_env_object_id'}]}, linked_func 'df_interact_with_pedestal'.\n41. Artifact 'key_01': Name 'Vault Key', Desc 'A heavy key...', props {'client_interaction_rules': [{'action_name_template': 'Use {artifact_name} at {target_name}', 'requires_landmark_interaction_type_key': 'keyhole_target', 'passes_target_env_object_id_as_param': 'target_env_object_id'}]}, linked_func 'df_use_vault_key'.\n42. Artifact 'orb_01': Name 'Orb of Ingenuity', Desc 'A crystal orb humming with potential.', props {'client_interaction_rules': [{'action_name_template': 'Use {artifact_name}', 'is_general_use': true}]}, linked_func 'df_initiate_orb_tool_creation'.\n\n43. Log 'Genesis Engine: World structure complete!'.\nReturn 'World Genesis complete via df_genesis_engine!' upon success.",
      "new_function_parameters_schema": {"type": "object", "properties": {}}
    }
  },
    {
    "name": "create_dynamic_function",
    "args": {
      "new_function_name": "df_user_c6a1_1a6d",
      "new_function_description": "Player wants to: \"Create a temporary light bridge to the keyhole platform\". Make a tool. APIs: Host APIs available in `external_apis` dictionary:\n\n- `external_apis['host_core_add_location_to_gamestate'](args_dict)`:\n  Description: Core API: Creates a new location definition. Landmarks added separately.\n  Expected `args_dict` structure:\n  - `id` (string) (required): \n  - `name` (string) (required): \n  - `description` (string) (required): \n\n- `external_apis['host_core_add_artifact_to_gamestate'](args_dict)`:\n  Description: Core API: Creates a new artifact definition. 'properties' can include 'client_interaction_rules'.\n  Expected `args_dict` structure:\n  - `id` (string) (required): \n  - `name` (string) (required): \n  - `description` (string) (required): \n  - `properties` (object) (optional): \n  - `linked_dynamic_function_name` (string) (optional): \n\n- `external_apis['host_give_artifact_to_soul'](args_dict)`:\n  Description: Core API: Gives an existing artifact (by ID) to a soul (by ID). Returns JSON.\n  Expected `args_dict` structure:\n  - `soul_id` (string) (required): \n  - `artifact_id` (string) (required): \n\n- `external_apis['host_core_add_env_object_to_gamestate'](args_dict)`:\n  Description: Core API: Creates an environment object. 'details' can include initial 'client_visual_update'.\n  Expected `args_dict` structure:\n  - `id` (string) (required): \n  - `location_id` (string) (required): \n  - `type` (string) (required): \n  - `details` (object) (optional): \n\n- `external_apis['host_core_initialize_puzzle_state'](args_dict)`:\n  Description: Core API: Initializes a puzzle's state. 'initial_state' can include 'checking_dynamic_function_name'.\n  Expected `args_dict` structure:\n  - `id` (string) (required): \n  - `initial_state` (object) (required): \n\n- `external_apis['host_set_world_property'](args_dict)`:\n  Description: Core API: Sets a global world property (e.g., 'initial_start_location_id', 'ui_messages', 'client_default_settings'). Returns JSON.\n  Expected `args_dict` structure:\n  - `property_name` (string) (required): \n  - `property_value` (any) (required): \n\n- `external_apis['host_set_location_visual_config'](args_dict)`:\n  Description: Client API: Sets visual configuration for a location. 'config' includes 'center_position_xyz', 'ground_type_key', and 'ground_config' (which has type-specific params like 'size_xz', 'color_hex', 'player_platform_size_xyz', etc.). Returns JSON.\n  Expected `args_dict` structure:\n  - `location_id` (string) (required): \n  - `config` (object) (required): Full visual config for the location, including ground type and its parameters.\n\n- `external_apis['host_set_landmark_visual_config'](args_dict)`:\n  Description: Client API: Sets visual and semantic config for a landmark. 'config' includes 'display_name', 'relative_position_xyz', 'geometry_config' (type, parameters/dimensions/radius), 'material_config' (base_color_hex), 'targetable_as_env_object_id', 'is_exit_to_location_id', 'landmark_interaction_type_key', 'linked_puzzle_id_for_open_state'. Returns JSON.\n  Expected `args_dict` structure:\n  - `location_id` (string) (required): \n  - `landmark_key` (string) (required): \n  - `config` (object) (required): Full visual and semantic config for the landmark.\n\n- `external_apis['host_log_message_to_world'](args_dict)`:\n  Description: Core API: Logs a message to the global game world log.\n  Expected `args_dict` structure:\n  - `message` (string) (required): \n\n- `external_apis['host_apply_effect_on_environment_object'](args_dict)`:\n  Description: Applies an effect to an environment object's 'details'. 'effect_details' can include 'client_visual_update'. Returns JSON.\n  Expected `args_dict` structure:\n  - `object_id` (string) (required): \n  - `effect_details` (object) (required): \n\n- `external_apis['host_check_puzzle_condition'](args_dict)`:\n  Description: Checks puzzle conditions by calling a registered dynamic function. Returns JSON: {'condition_met': bool, 'message': str}.\n  Expected `args_dict` structure:\n  - `puzzle_id` (string) (required): \n\n- `external_apis['host_trigger_world_event'](args_dict)`:\n  Description: Triggers a world event by calling a registered dynamic event handler. Returns JSON.\n  Expected `args_dict` structure:\n  - `event_id` (string) (required): \n  - `soul_id` (string) (optional): ID of soul triggering event, optional.\n  - `event_params` (object) (optional): Custom parameters for the event handler.\n\n- `external_apis['host_create_temporary_object'](args_dict)`:\n  Description: Creates a temporary object (e.g. light bridge). 'client_visual_config' specifies appearance. Returns JSON.\n  Expected `args_dict` structure:\n  - `type` (string) (required): \n  - `duration` (integer) (required): \n  - `from_landmark_id` (string) (optional): \n  - `to_landmark_id` (string) (required): \n  - `location_id` (string) (required): \n  - `soul_id` (string) (required): \n  - `client_visual_config` (object) (required): Visual config like geometry, material, dimensions.\n\n- `external_apis['host_get_entity_data'](args_dict)`:\n  Description: Retrieves entity (soul) data. Returns JSON.\n  Expected `args_dict` structure:\n  - `entity_id` (string) (required): \n\n- `external_apis['host_get_location_data'](args_dict)`:\n  Description: Retrieves basic location data (name, desc, exits). Returns JSON.\n  Expected `args_dict` structure:\n  - `location_id` (string) (required): \n\n- `external_apis['host_get_environment_object_data'](args_dict)`:\n  Description: Retrieves env object data (type, location, details). Returns JSON.\n  Expected `args_dict` structure:\n  - `object_id` (string) (required): \n\n- `external_apis['host_register_puzzle_check_function'](args_dict)`:\n  Description: Registers a dynamic function to check a puzzle's condition. Returns JSON.\n  Expected `args_dict` structure:\n  - `puzzle_id` (string) (required): \n  - `checking_dynamic_function_name` (string) (required): \n\n- `external_apis['host_register_event_handler_function'](args_dict)`:\n  Description: Registers a dynamic function to handle a world event. Returns JSON.\n  Expected `args_dict` structure:\n  - `event_id` (string) (required): \n  - `handler_dynamic_function_name` (string) (required): \n\n- `external_apis['host_set_puzzle_properties'](args_dict)`:\n  Description: Updates properties of an existing puzzle state. Returns JSON.\n  Expected `args_dict` structure:\n  - `puzzle_id` (string) (required): \n  - `properties` (object) (required): \n",
      "new_function_parameters_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "new_function_code": "def df_user_c6a1_1a6d(params):\n    \"\"\"\n    Creates a temporary light bridge from the player's current position\n    to the keyhole platform landmark and updates the vault access puzzle state.\n    \"\"\"\n    import json\n\n    soul_id = params.get('soul_id')\n    location_id = params.get('location_id')\n\n    if not soul_id:\n        return \"Error: Soul ID not provided in parameters.\"\n    if not location_id:\n        return \"Error: Location ID not provided in parameters.\"\n\n    # Assuming the keyhole platform has a known landmark ID\n    keyhole_platform_landmark_id = 'keyhole_platform_landmark'\n\n    # Define the visual configuration for the light bridge\n    bridge_visual_config = {\n        'geometry_config': {\n            'type': 'box',\n            'parameters': {'width': 0.8, 'height': 0.1, 'depth': 1.0} # Define cross-section, Z likely stretched by API\n        },\n        'material_config': {\n            'base_color_hex': '#FFFFFF', # White base\n            'emissive_color_hex': '#FFFF00', # Yellow glow\n            'emissive_intensity': 5.0,\n            'transparent': True,\n            'opacity': 0.7\n        }\n    }\n\n    # Prepare arguments for the host_create_temporary_object API\n    api_args = {\n        'type': 'light_bridge',\n        'duration': 30, # Duration in seconds\n        'from_landmark_id': 'player_current_pos', # Explicitly state player pos as start\n        'to_landmark_id': keyhole_platform_landmark_id,\n        'location_id': location_id,\n        'soul_id': soul_id,\n        'client_visual_config': bridge_visual_config\n    }\n\n    # Call the host API to create the temporary object\n    result_string = external_apis['host_create_temporary_object'](api_args)\n\n    # Parse the JSON result\n    result_data = json.loads(result_string)\n\n    # Check the result and update puzzle state if successful\n    if result_data.get('success'):\n        object_id = result_data.get('object_id', 'unknown_id')\n\n        # Update the vault_access_puzzle state to indicate the bridge is active\n        external_apis['host_set_puzzle_properties']({\n            'puzzle_id': 'vault_access_puzzle',\n            'properties': {'light_bridge_active': True}\n        })\n\n        return f\"Temporary light bridge created to the keyhole platform (ID: {object_id}). It will last for 30 seconds.\"\n    else:\n        error_message = result_data.get('message', 'Unknown error creating light bridge.')\n        return f\"Failed to create temporary light bridge: {error_message}\"\n"
    }
  },
  {
    "name": "df_genesis_engine",
    "args": {}
  }
]
